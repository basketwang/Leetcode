class Solution {
    public int[][] kClosest(int[][] points, int k) {
        if (points == null || points.length == 0 || points[0].length != 2) return null;
        if (points.length < k) return points;
        PriorityQueue<int[]> pqueue = new PriorityQueue<int[]>((a, b)-> {
           return (int)(Math.pow(b[0], 2) + Math.pow(b[1], 2) - Math.pow(a[0], 2) - Math.pow(a[1], 2));
        });
        for (int i = 0; i < points.length; i++) {
            pqueue.offer(points[i]);
            if (pqueue.size() > k) {
                pqueue.poll();
            }
        }
        return pqueue.toArray(new int[0][]);
    }
}

/* Lambda expression
PriorityQueue: offer to the end. Poll from the head.
K closest points, need remove larger distance points. So comparator should be -(a-b)
*/
