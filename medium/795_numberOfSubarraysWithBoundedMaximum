class Solution {
    public int numSubarrayBoundedMax(int[] nums, int left, int right) {
       int [] numOfSubarrayIncludingCurrentNum = new int[nums.length]; 
        int prevIndexOfNumLargerThanRight = -1;
       for (int i = 0; i < nums.length; i++) {
           if (nums[i] > right) {
               numOfSubarrayIncludingCurrentNum[i] = 0; 
               prevIndexOfNumLargerThanRight = i;
           } else if (nums[i] < left) {
               numOfSubarrayIncludingCurrentNum[i] = numOfSubarrayIncludingCurrentNum[i-1]; 
           } else {
               numOfSubarrayIncludingCurrentNum[i] = i - prevIndexOfNumLargerThanRight;
           }
       }
       int sum = 0;
        for (int num : numOfSubarrayIncludingCurrentNum) {
            sum += num;
        }
        return sum;
    }
}
/*
dp array meaning: number of subarray from 0 to current element containing current element.
Condition:
current element is larger than right -> any subarray with the element doesn't fit, so dp[i] = 0
current element is smaller than left -> the element itself can't be a subarray. so dp[i] = dp[i-1]
current element is within range -> valid subarray will be [i], [i-1, i], [i-2, i]...until previous number larger than right. so dp[i] = i - prev;

*/
