class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        if (prerequisites == null || prerequisites.length == 0) return true;
        // number of prerequisites courses
        int[] hasPreCourses = new int[numCourses];
        HashMap<Integer, List<Integer>> map = new HashMap<>();
        for (int[] pre : prerequisites){
            if (!map.containsKey(pre[1])) {
                map.put(pre[1], new LinkedList<Integer>());
            }
            List<Integer> list = map.get(pre[1]);
            list.add(pre[0]);
            hasPreCourses[pre[0]]++;
        }
        LinkedList<Integer> queue = new LinkedList<>();
        for (int i = 0; i < numCourses; i++){
            if (hasPreCourses[i] == 0) {
                queue.offer(i);
            }
        }
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                int course = queue.poll();
                if (map.containsKey(course)) {
                    for (int nextCourse : map.get(course)) {
                        hasPreCourses[nextCourse]--;
                        if (hasPreCourses[nextCourse] == 0) {
                            queue.offer(nextCourse);
                        }
                    }
                }
            }
        }
        for (int hasPre: hasPreCourses) {
            if (hasPre != 0) return false;
        }
        return true;
    }
}
