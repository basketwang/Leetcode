class BoundedBlockingQueue {

    private Queue<Integer> queue;
    private int size;
    private Lock lock;
    private Condition notEmpty;
    private Condition notFull;
    
    public BoundedBlockingQueue(int capacity) {
      this.size = capacity;
      queue = new LinkedList<Integer>();
      lock = new ReentrantLock();
      notEmpty = lock.newCondition();
      notFull = lock.newCondition();
    }
    
    public void enqueue(int element) throws InterruptedException {
      lock.lock();
      try {
          while (queue.size() == size) {
              notFull.await();
          }
          queue.offer(element);
          notEmpty.signal();
       } finally {
          lock.unlock();
       }
    }
    
    public int dequeue() throws InterruptedException {
      lock.lock();
      try {
        while (queue.size() == 0) {
           notEmpty.await();
        }

        int e = queue.poll();
        notFull.signal();
        return e;
      } finally {
        lock.unlock();
      }
    }
    
    public int size() {
      lock.lock();
      try {
        return queue.size();
      } finally {
        lock.unlock();
      }
    }
}
