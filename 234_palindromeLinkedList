/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public boolean isPalindrome(ListNode head) {
        if (head == null) return true;
        ListNode slow = head;
        ListNode fast = head;
        while (fast != null && fast.next != null){
            slow = slow.next;
            fast = fast.next.next;
        }
        // 1 2 2 1
        //     |   |
        // 1 2 3 2 1
        ListNode next = slow.next;
        slow.next = null;
        while (next != null) {
            ListNode nextNext = next.next;
            next.next = slow;
            slow = next;
            next = nextNext;
        }
        
        while(slow != null) {
            if (head.val != slow.val) return false;
            head = head.next;
            slow = slow.next;
        }
        return true;
    }
}
/*
Fast-slow pointer to find the mid node
Break the list by slow.next = null so we have the end of final comparison loop
nextNext is a local-scope variable, could be defined in the while loop
Speical attention to null pointer overflow. Draw picture to better understand both cases
with even and odd number of elements
   */
/*
class Solution {
    public boolean isPalindrome(ListNode head) {
        if (head == null) return true;
        ListNode current = head;
        Deque<ListNode> stack = new ArrayDeque<>();
        while (current != null){
            stack.push(current);
            current = current.next;
        }
        while (!stack.isEmpty()) {
            ListNode node = stack.pop();
            if (head.val != node.val) return false;
            head = head.next;
        }
        return true;
        
    }
}
*/
