class Solution {
    public int numIslands(char[][] grid) {
        if (grid == null || grid.length == 0 || grid[0].length == 0) {
            return 0;
        }
        int count = 0;
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[i].length; j++) {
                if (grid[i][j] == '1') {
                    DFS(i, j, grid);
                    count++;
                }
            }
        }
        return count;
    }
    public void DFS(int i, int j, char[][] grid){
        if (i >= grid.length || i < 0 || j >= grid[i].length || j < 0) return;
        if (grid[i][j] == '0') return;
        grid[i][j] = '0';
        DFS(i+1, j, grid);
        DFS(i, j+1, grid);
        DFS(i-1, j, grid);
        DFS(i, j-1, grid);
    }
}

/*
Check out of boundary
   */
