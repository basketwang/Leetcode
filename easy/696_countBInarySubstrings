class Solution {
    public int countBinarySubstrings(String s) {
        // Numbers are grouped consecutively is the key
        // 00|111|0: whenever have a flip, the minimum digits between its left and right part will be our target. Look back from the second flip and calculate for the first flip
        if(s == null || s.length() < 2) return 0;
        int forwardCount = 1;
        int backwardCount = 0;
        int result = 0;
        char curr = s.charAt(0);
        for (int i = 1; i < s.length(); i++) {
            if (curr == s.charAt(i)) {
                forwardCount++;
            } else {
                result += Math.min(forwardCount, backwardCount);
                curr = s.charAt(i);
                backwardCount = forwardCount;
                forwardCount = 1;
            }
        }
        result += Math.min(forwardCount, backwardCount);
        return result;
    }
}
