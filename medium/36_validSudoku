class Solution {
    public boolean isValidSudoku(char[][] board) {
        // check each row
        for (int r = 0; r < 9; r++) {
            boolean[] appear = new boolean[9];
            for (int c = 0; c < 9; c++){
                if (board[r][c] >= '1' && board[r][c] <= '9') {
                    if (appear[board[r][c] - '1']) return false; // duplicately happen
                    appear[board[r][c] - '1'] = true;
                }
            }
        }
        // check each column
        for (int c = 0; c < 9; c++) {
            boolean[] appear = new boolean[9];
            for (int r = 0; r < 9; r++){
                if (board[r][c] >= '1' && board[r][c] <= '9') {
                    if (appear[board[r][c] - '1']) return false; // duplicately happen
                    appear[board[r][c] - '1'] = true;
                }
            }
        }
        // check each squere
        for (int r = 0; r < 9; r+=3) {
            for (int c = 0; c < 9; c+=3) {
                boolean[] appear = new boolean[9];
                for (int i = 0; i < 3; i++) {
                    for (int j = 0; j < 3; j++) {
                        if (board[r+i][c+j] >= '1' && board[r+i][c+j] <= '9') {
                            if (appear[board[r+i][c+j] - '1']) return false; // duplicately happen
                            appear[board[r+i][c+j] - '1'] = true;
                        }
                    }
                }
            }
        }
        return true;
    }
}
