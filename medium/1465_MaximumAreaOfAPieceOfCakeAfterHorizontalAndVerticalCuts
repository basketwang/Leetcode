class Solution {
    public int maxArea(int h, int w, int[] horizontalCuts, int[] verticalCuts) {
        if (horizontalCuts == null || verticalCuts == null) return 0;
        int hs = horizontalCuts.length;
        int vs = verticalCuts.length;
        Arrays.sort(horizontalCuts);
        Arrays.sort(verticalCuts);
        if (h < horizontalCuts[hs-1] || w < verticalCuts[vs-1]) return 0;
        long maxH = horizontalCuts[0];
        for (int i = 1; i < hs; i++){
            maxH = Math.max(maxH, horizontalCuts[i] - horizontalCuts[i-1]);
        }
        maxH = Math.max(maxH, h - horizontalCuts[hs-1]);
        long maxV = verticalCuts[0];
        for (int i = 1; i < vs; i++){
            maxV = Math.max(maxV, verticalCuts[i] - verticalCuts[i-1]);
        }
        maxV = Math.max(maxV, w - verticalCuts[vs-1]);
        return (int) ((maxH * maxV) % ((long)Math.pow(10, 9)+7));
    }
}

/*
Complexity: O(m+n). No need to be O(m+n)
Modulo: 
1. For extra large number, double may lose accuracy. 
2. Math.pow returns double, Need covert to long explicitly. 
3. An expression with mixed type, conversion is implicit from small range type to large range type
   int -> long -> double

   */
