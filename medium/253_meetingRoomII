class Solution {
    public int minMeetingRooms(int[][] intervals) {
        if(intervals == null || intervals.length <= 0 || intervals[0].length != 2) return 0;
        int len = intervals.length;
        int[] open = new int[len];
        int[] closed = new int[len];
        for (int i = 0; i < len; i++) {
            open[i] = intervals[i][0];
            closed[i]= intervals[i][1];
        }
        Arrays.sort(open);
        Arrays.sort(closed);
        int count = 0, maxCount = 0;
        int i = 0, j = 0;
        while (i < len) { // open should always get end first. No need to check additional closed intervals.
            if (open[i] < closed[j]) {
                count++;
                i++;
                maxCount = Math.max(maxCount, count);
            } else if (open[i] > closed[j]) {
                count--;
                j++;
            } else {
                i++;
                j++;
            }
        }
        return maxCount;
    }
}
